// Generated by CoffeeScript 1.10.0
(function() {
  var _, expect, navigator;

  expect = require('chai').expect;

  navigator = require('../index.coffee');

  _ = require('lodash');

  console.inspect = function(data, depth, showHidden) {
    if (depth == null) {
      depth = 2;
    }
    if (showHidden == null) {
      showHidden = false;
    }
    return this.log(require('util').inspect(data, showHidden, depth, true));
  };

  describe('navigator', function() {
    it('should be an function', function() {
      return expect(navigator).to.be.an('function');
    });
    it('.config should be an method', function() {
      return expect(navigator.config).to.be.a('function');
    });
    it('should throw an error when no argument is passed to it', function() {
      return expect(function() {
        return navigator.call(null);
      }).to["throw"](/You must pass a function/);
    });
    it('should return an empty object when an empty (or one that does not manipulate the passed arg) fn is provided to it', function() {
      return expect(navigator(function(makeRoute) {})).to.eql({});
    });
    describe('When passing route paths to the fn passed as argument to the provided fn passed to .setRoutes', function() {
      return describe('When calling sub-methods of the makeRoute fn (Which is passed by the navigator to the fn provided by the client)', function() {
        var restfulRoutes;
        restfulRoutes = {
          'GET /robots': 'RobotsController.index',
          'GET /robots/:id': 'RobotsController.show',
          'GET /robots/new': 'RobotsController.new',
          'POST /robots/new': 'RobotsController.new',
          'POST /robots': 'RobotsController.create',
          'GET /robots/edit/:id': 'RobotsController.edit',
          'POST /robots/edit/:id': 'RobotsController.edit',
          'PUT /robots/:id': 'RobotsController.update',
          'DELETE /robots/:id': 'RobotsController.destroy'
        };
        describe('When using any sub-method', function() {
          it('should guess the controllerName (properly camelCased)', function() {
            var guessedControllerName;
            guessedControllerName = _.values(navigator(function(fn) {
              return fn('/robots').REST('all');
            }))[0].split('.')[0];
            return expect(guessedControllerName).to.equal('RobotsController');
          });
          return describe('When passing a route in kebab-case (words separated by hyphens)', function() {
            return it('should guess the controller equivalent in camelCase', function() {
              var guessedControllerName;
              guessedControllerName = _.values(navigator(function(fn) {
                return fn('/kebab-case').REST('all');
              }))[0].split('.')[0];
              return expect(guessedControllerName).to.equal('KebabCaseController');
            });
          });
        });
        describe('.REST', function() {
          describe('When passing "all" as argument', function() {
            it('should return a restful version of the passed route in a routes object', function() {
              var routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/robots').REST('all');
              });
              return expect(routes).to.eql(restfulRoutes);
            });
            return it('should always place the index, edit and new action before any other action', function() {
              var ref, ref1, ref2, ref3, ref4, routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/robots').REST('all');
              });
              routes = _.map(routes, function(action, route) {
                return route;
              });
              expect((0 <= (ref = routes.indexOf('GET /robots')) && ref <= 4)).to.be["true"];
              expect((0 <= (ref1 = routes.indexOf('GET /robots/new')) && ref1 <= 4)).to.be["true"];
              expect((0 <= (ref2 = routes.indexOf('POST /robots/new')) && ref2 <= 4)).to.be["true"];
              expect((0 <= (ref3 = routes.indexOf('GET /robots/edit/:id')) && ref3 <= 4)).to.be["true"];
              return expect((0 <= (ref4 = routes.indexOf('POST /robots/edit/:id')) && ref4 <= 4)).to.be["true"];
            });
          });
          describe('When passing a list of the actions to include as argument', function() {
            return it('should return a restful version of the passed route with only the included actions in a routes object', function() {
              var routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/robots').REST('index', 'show');
              });
              return expect(routes).to.eql(_.pick(restfulRoutes, [
                _.findKey(restfulRoutes, function(action) {
                  return _.endsWith(action, 'index');
                }), _.findKey(restfulRoutes, function(action) {
                  return _.endsWith(action, 'show');
                })
              ]));
            });
          });
          return describe('When passing a list of the actions to exclude as argument', function() {
            return it('should return a restful version of the passed route with all but the excluded actions in a routes object', function() {
              var expectedRoutes, routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/robots').REST('!', 'destroy');
              });
              expectedRoutes = _.omit(restfulRoutes, _.findKey(restfulRoutes, function(action) {
                return _.endsWith(action, 'destroy');
              }));
              return expect(routes).to.eql(expectedRoutes);
            });
          });
        });
        describe('.GET', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').GET({
                '/anaheim-machines': 'customIndex'
              });
            });
            return expect(routes['GET /robots/anaheim-machines']).to.equal('RobotsController.customIndex');
          });
        });
        describe('.POST', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').POST({
                '/anaheim-machines/:id': 'customCreate'
              });
            });
            return expect(routes['POST /robots/anaheim-machines/:id']).to.equal('RobotsController.customCreate');
          });
        });
        describe('.PUT', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').PUT({
                '/anaheim-machines/:id': 'customUpdate'
              });
            });
            return expect(routes['PUT /robots/anaheim-machines/:id']).to.equal('RobotsController.customUpdate');
          });
        });
        describe('.PATCH', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').PATCH({
                '/anaheim-machines/:id': 'customUpdate'
              });
            });
            return expect(routes['PATCH /robots/anaheim-machines/:id']).to.equal('RobotsController.customUpdate');
          });
        });
        describe('.DELETE', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').DELETE({
                '/anaheim-machines/:id': 'customDestroy'
              });
            });
            return expect(routes['DELETE /robots/anaheim-machines/:id']).to.equal('RobotsController.customDestroy');
          });
        });
        describe('.GET_and_POST', function() {
          return it('should add the custom path route (prefixed with route) for both verbs to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').GET_and_POST({
                '/anaheim-machines/new': 'customNew'
              });
            });
            expect(routes['GET /robots/anaheim-machines/new']).to.equal('RobotsController.customNew');
            return expect(routes['POST /robots/anaheim-machines/new']).to.equal('RobotsController.customNew');
          });
        });
        describe('.ALL', function() {
          return it('should add the custom path route (prefixed with route) for all verbs to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').ALL({
                '/anaheim-machines/ditto': 'customAction'
              });
            });
            expect(routes['GET /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            expect(routes['POST /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            expect(routes['PATCH /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            expect(routes['PUT /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            return expect(routes['DELETE /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
          });
        });
        describe('When the controllerName is specified before the action', function() {
          return it('should take precedence over the guessed controller name(based on the route)', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/').GET({
                '': 'HomeController.index'
              });
            });
            return expect(routes['GET /']).to.equal('HomeController.index');
          });
        });
        describe('.path', function() {
          it('It should create a route with route passed to makeRoute as prefix', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/admin').path('/robots').confOverride({
                rootAsControllerPath: true
              }).GET({
                '': 'index'
              });
            });
            return expect(routes).to.eql({
              'GET /admin/robots': 'admin/RobotsController.index'
            });
          });
          describe('When chaining path', function() {
            return it('It will always refer back to the initial route data', function() {
              var routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/admin').confOverride({
                  pathToRecordFormat: '*/:id/:slug',
                  rootAsControllerPath: true
                }).path('/robots').confOverride({
                  pathToRecordFormat: '*/:id'
                }).REST('update').path('/articles').REST('update');
              });
              return expect(routes).to.eql({
                'PUT /admin/robots/:id': 'admin/RobotsController.update',
                'PUT /admin/articles/:id/:slug': 'admin/ArticlesController.update'
              });
            });
          });
          return describe('When using ignoreRootForControllerName option', function() {
            return it('It should guess the controllerName without taking the root into account', function() {
              var routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/api').confOverride({
                  ignoreRootForControllerName: true
                }).path('/robots').REST('index').path('/articles').REST('index');
              });
              return expect(routes).to.eql({
                'GET /api/robots': 'RobotsController.index',
                'GET /api/articles': 'ArticlesController.index'
              });
            });
          });
        });
        describe('.controller', function() {
          return describe('When passing a custom controller', function() {
            return it('should override the guessed controller default for a given route', function() {
              var customNamedController, routes;
              customNamedController = 'InstitutionsController';
              routes = navigator(function(makeRoute) {
                return makeRoute('/museums').controller(customNamedController).REST('index');
              });
              return expect(routes['GET /museums']).to.equal(customNamedController + ".index");
            });
          });
        });
        return describe('.confOverride', function() {
          describe('When passing a custom controller', function() {
            return it('should override the guessed controller default for a given route', function() {
              var customNamedController, routes;
              customNamedController = 'InstitutionsController';
              routes = navigator(function(makeRoute) {
                return makeRoute('/museums').confOverride({
                  controller: customNamedController
                }).REST('index');
              });
              return expect(routes['GET /museums']).to.equal(customNamedController + ".index");
            });
          });
          describe('When overriding the default pathToRecordFormat', function() {
            return it('should change how routes are built when using .REST', function() {
              var expectedRoutes, routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/articles').confOverride({
                  pathToRecordFormat: '*/:id/:slug'
                }).REST('all');
              });
              expectedRoutes = {
                'GET /articles': 'ArticlesController.index',
                'GET /articles/:id/:slug': 'ArticlesController.show',
                'GET /articles/new': 'ArticlesController.new',
                'POST /articles/new': 'ArticlesController.new',
                'POST /articles': 'ArticlesController.create',
                'GET /articles/edit/:id/:slug': 'ArticlesController.edit',
                'POST /articles/edit/:id/:slug': 'ArticlesController.edit',
                'PUT /articles/:id/:slug': 'ArticlesController.update',
                'DELETE /articles/:id/:slug': 'ArticlesController.destroy'
              };
              return expect(routes).to.eql(expectedRoutes);
            });
          });
          describe('When overriding the default localizeRoute', function() {
            return it('should create the regular routes, as well as localized versions of it, based on a locale object', function() {
              var expectedRoutes, routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/articles').confOverride({
                  localizeRoute: ['en', 'es'],
                  defaultLocale: 'en',
                  localizedData: {
                    en: '/articles',
                    es: '/articulos'
                  }
                }).REST('all');
              });
              expectedRoutes = {
                'GET /articles': 'ArticlesController.index',
                'GET /articles/:id': 'ArticlesController.show',
                'GET /articles/new': 'ArticlesController.new',
                'POST /articles/new': 'ArticlesController.new',
                'POST /articles': 'ArticlesController.create',
                'GET /articles/edit/:id': 'ArticlesController.edit',
                'POST /articles/edit/:id': 'ArticlesController.edit',
                'PUT /articles/:id': 'ArticlesController.update',
                'DELETE /articles/:id': 'ArticlesController.destroy',
                'GET /es/articulos': 'ArticlesController.index',
                'GET /es/articulos/:id': 'ArticlesController.show',
                'GET /es/articulos/nuevo': 'ArticlesController.new',
                'POST /es/articulos/nuevo': 'ArticlesController.new',
                'POST /es/articulos': 'ArticlesController.create',
                'GET /es/articulos/editar/:id': 'ArticlesController.edit',
                'POST /es/articulos/editar/:id': 'ArticlesController.edit',
                'PUT /es/articulos/:id': 'ArticlesController.update',
                'DELETE /es/articulos/:id': 'ArticlesController.destroy'
              };
              return expect(routes).to.eql(expectedRoutes);
            });
          });
          describe('When setting rootAsControllerPath as true', function() {
            return it('should use the route\'s root path as the controllerPath', function() {
              var expectedRoutes, routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/admin/articles').confOverride({
                  rootAsControllerPath: true
                }).REST('index');
              });
              expectedRoutes = {
                'GET /admin/articles': 'admin/ArticlesController.index'
              };
              return expect(routes).to.eql(expectedRoutes);
            });
          });
          return it('should only override the settings for a given route, and not the rest', function() {
            var customNamedController, routes;
            customNamedController = 'InstitutionsController';
            routes = navigator(function(makeRoute) {
              makeRoute('/museums').confOverride({
                controller: customNamedController
              }).REST('index');
              return makeRoute('/artists').REST('index');
            });
            expect(routes['GET /museums']).to.equal(customNamedController + ".index");
            return expect(routes['GET /artists']).to.equal("ArtistsController.index");
          });
        });
      });
    });
    describe('.config', function() {
      it('should modify the module configuration when valid data is passed', function() {
        var routes;
        navigator.config({
          localizeRoute: ['en', 'es'],
          localizedData: {
            '/articles': {
              en: '/articles',
              es: '/articulos'
            }
          }
        });
        routes = navigator(function(makeRoute) {
          return makeRoute('/articles').REST('edit');
        });
        return expect(routes).to.eql({
          'GET /articles/edit/:id': 'ArticlesController.edit',
          'POST /articles/edit/:id': 'ArticlesController.edit',
          'GET /es/articulos/editar/:id': 'ArticlesController.edit',
          'POST /es/articulos/editar/:id': 'ArticlesController.edit'
        });
      });
      return it('should throw an error when invalid settings(attributes) are passed');
    });
    return describe('.getConfig', function() {
      return it('should return a copy of the configuration object', function() {
        var config1, config2, customConfig, defaultConfig;
        defaultConfig = {
          pathToRecordFormat: '*/:id',
          localizeRoute: false,
          defaultLocale: 'en',
          prefixLocale: true,
          skipLocalePrefixOnDefaultLocale: true,
          localizedData: null,
          restFullActionsLocalization: {
            en: {
              edit: 'edit',
              "new": 'new'
            },
            es: {
              edit: 'editar',
              "new": 'nuevo'
            }
          },
          rootAsControllerPath: false
        };
        customConfig = {
          pathToRecordFormat: '*/:id/:slug',
          localizeRoute: ['es', 'en'],
          defaultLocale: 'en',
          prefixLocale: false,
          localizedData: {
            '/products': {
              en: '/products',
              es: '/productos'
            },
            '/articles': {
              en: '/articles',
              es: '/articulos'
            }
          }
        };
        config1 = navigator.config(defaultConfig).getConfig();
        config2 = navigator.config(customConfig).getConfig();
        expect(config1).to.eql(defaultConfig);
        return expect(config2).to.eql(_.defaults({}, customConfig, defaultConfig));
      });
    });
  });

}).call(this);

//# sourceMappingURL=index.spec.js.map
