// Generated by CoffeeScript 1.9.3
(function() {
  var expect, navigator;

  expect = require('chai').expect;

  navigator = require('../index');

  console.inspect = function(data, depth, showHidden) {
    if (depth == null) {
      depth = 2;
    }
    if (showHidden == null) {
      showHidden = false;
    }
    return this.log(require('util').inspect(data, showHidden, depth, true));
  };

  describe('navigator', function() {
    it('should be an function', function() {
      return expect(navigator).to.be.an('function');
    });
    it('.config should be an method', function() {
      return expect(navigator.config).to.be.a('function');
    });
    it('should throw an error when no argument is passed to it', function() {
      return expect(function() {
        return navigator.call(null);
      }).to["throw"](/You must pass a function/);
    });
    it('should return an empty object when an empty (or one that does not manipulate the passed arg) fn is provided to it', function() {
      return expect(navigator(function(makeRoute) {})).to.eql({});
    });
    return describe('When passing route paths to the fn passed as argument to the provided fn passed to .setRoutes', function() {
      it('should return a restful version of the passed route in an routes object', function() {
        var expectedRoutes, routes;
        routes = navigator(function(makeRoute) {
          return makeRoute('/robots');
        });
        expectedRoutes = {
          'GET /robots': 'RobotsController.index',
          'GET /robots/new': 'RobotsController.new',
          'POST /robots': 'RobotsController.create',
          'GET /robots/edit/:id': 'RobotsController.edit',
          'PUT /robots/:id': 'RobotsController.update',
          'DELETE /robots/:id': 'RobotsController.destroy'
        };
        return expect(routes).to.eql(expectedRoutes);
      });
      return describe('When calling sub-methods of the makeRoute fn (Which is passed by the navigator to the fn provided by the client)', function() {
        describe('.GET', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var expectedRoutes, routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').GET({
                '/anaheim-machines': 'customIndex'
              });
            });
            expectedRoutes = {
              'GET /robots': 'RobotsController.index',
              'GET /robots/new': 'RobotsController.new',
              'POST /robots': 'RobotsController.create',
              'GET /robots/edit/:id': 'RobotsController.edit',
              'PUT /robots/:id': 'RobotsController.update',
              'DELETE /robots/:id': 'RobotsController.destroy',
              'GET /robots/anaheim-machines': 'RobotsController.customIndex'
            };
            return expect(routes).to.eql(expectedRoutes);
          });
        });
        describe('.POST', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').POST({
                '/anaheim-machines/:id': 'customCreate'
              });
            });
            return expect(routes['POST /robots/anaheim-machines/:id']).to.equal('RobotsController.customCreate');
          });
        });
        describe('.PUT', function() {
          it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').PUT({
                '/anaheim-machines/:id': 'customUpdate'
              });
            });
            return expect(routes['PUT /robots/anaheim-machines/:id']).to.equal('RobotsController.customUpdate');
          });
          return describe('.PATCH', function() {
            return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
              var routes;
              routes = navigator(function(makeRoute) {
                return makeRoute('/robots').PATCH({
                  '/anaheim-machines/:id': 'customUpdate'
                });
              });
              return expect(routes['PATCH /robots/anaheim-machines/:id']).to.equal('RobotsController.customUpdate');
            });
          });
        });
        describe('.DELETE', function() {
          return it('should add the custom path route (prefixed with route) to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').DELETE({
                '/anaheim-machines/:id': 'customDestroy'
              });
            });
            return expect(routes['DELETE /robots/anaheim-machines/:id']).to.equal('RobotsController.customDestroy');
          });
        });
        describe('.GET_and_POST', function() {
          return it('should add the custom path route (prefixed with route) for both verbs to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').GET_and_POST({
                '/anaheim-machines/new': 'customNew'
              });
            });
            expect(routes['GET /robots/anaheim-machines/new']).to.equal('RobotsController.customNew');
            return expect(routes['POST /robots/anaheim-machines/new']).to.equal('RobotsController.customNew');
          });
        });
        return describe('.ALL', function() {
          return it('should add the custom path route (prefixed with route) for all verbs to the routes object, and assigning it the defined controller action', function() {
            var routes;
            routes = navigator(function(makeRoute) {
              return makeRoute('/robots').ALL({
                '/anaheim-machines/ditto': 'customAction'
              });
            });
            expect(routes['GET /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            expect(routes['POST /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            expect(routes['PATCH /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            expect(routes['PUT /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
            return expect(routes['DELETE /robots/anaheim-machines/ditto']).to.equal('RobotsController.customAction');
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=index.spec.js.map
