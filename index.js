// Generated by CoffeeScript 1.9.3
(function() {
  var slice = [].slice;

  (function() {
    var VERBS, _, _currentRouteConf, _makeCustomRoute, _makeRestfulRoutes, _makeRoute, _optionsDefaults, navigator;
    _ = require('lodash');
    _optionsDefaults = {
      pathToRecordFormat: 'route/:id',
      localizeRoute: false,
      defaultLocale: 'en',
      prefixOnDefaultLocale: false
    };
    _currentRouteConf = null;
    navigator = function(fn) {
      var routes;
      if (fn != null) {
        navigator._routes = {};
        fn(_makeRoute) || {};
        routes = navigator._routes;
        navigator._routes = null;
        return routes;
      } else {
        throw new Error('You must pass a function as argument');
      }
    };
    navigator.config = function(options) {};
    _makeRoute = function(route) {
      var currentRoutes;
      this._currentRouteConf = null;
      currentRoutes = {};
      _currentRouteConf = {};
      _.extend(navigator._routes, currentRoutes);
      _makeRoute._currentRoot = route;
      return _makeRoute;
    };
    _makeRoute.REST = function() {
      var filter, restFulRoutes;
      filter = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      restFulRoutes = _makeRestfulRoutes(filter, this._currentRoot);
      _.extend(navigator._routes, restFulRoutes);
      return this;
    };
    _makeRoute.GET = function(pathObj) {
      _makeCustomRoute.call(_makeRoute, 'GET', pathObj);
      return this;
    };
    _makeRoute.POST = function(pathObj) {
      _makeCustomRoute.call(_makeRoute, 'POST', pathObj);
      return this;
    };
    _makeRoute.PUT = function(pathObj) {
      _makeCustomRoute.call(_makeRoute, 'PUT', pathObj);
      return this;
    };
    _makeRoute.PATCH = function(pathObj) {
      _makeCustomRoute.call(_makeRoute, 'PATCH', pathObj);
      return this;
    };
    _makeRoute.DELETE = function(pathObj) {
      _makeCustomRoute.call(_makeRoute, 'DELETE', pathObj);
      return this;
    };
    _makeRoute.GET_and_POST = function(pathObj) {
      this.GET(pathObj);
      this.POST(pathObj);
      return this;
    };
    VERBS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];
    _makeRoute.ALL = function(pathObj) {
      return _.each(VERBS, function(VERB) {
        return _makeRoute[VERB](pathObj);
      });
    };
    _makeRoute.confOverride = function(options) {
      if (options == null) {
        options = {};
      }
      _currentRouteConf = options;
      return this;
    };
    _makeCustomRoute = function(VERB, pathObj) {
      var action, actionParts, controllerName, guessedControllerName, path, route;
      for (path in pathObj) {
        action = pathObj[path];
        route = this._currentRoot;
        guessedControllerName = (_.capitalize(route.substr(1))) + "Controller";
        controllerName = _currentRouteConf.controller || guessedControllerName;
        actionParts = action.split('.');
        if (actionParts.length > 1) {
          controllerName = actionParts[0];
          action = actionParts[1];
        }
        route += path;
        navigator._routes[VERB + " " + route] = controllerName + "." + action;
      }
      return _makeRoute;
    };
    _makeRestfulRoutes = function(filter, route) {
      var actions, controllerName, routeObj;
      controllerName = _currentRouteConf.controller || ((_.capitalize(route.substr(1))) + "Controller");
      actions = {
        index: true,
        show: true,
        "new": true,
        create: true,
        edit: true,
        update: true,
        destroy: true
      };
      if (filter[0] !== 'all') {
        actions = filter[0] === '!' ? _.omit(actions, filter) : _.pick(actions, filter);
      }
      routeObj = {};
      if (actions.index) {
        routeObj["GET " + route] = controllerName + ".index";
      }
      if (actions.show) {
        routeObj["GET " + route + "/:id"] = controllerName + ".show";
      }
      if (actions["new"]) {
        routeObj["GET " + route + "/new"] = controllerName + ".new";
      }
      if (actions.create) {
        routeObj["POST " + route] = controllerName + ".create";
      }
      if (actions.edit) {
        routeObj["GET " + route + "/edit/:id"] = controllerName + ".edit";
      }
      if (actions.update) {
        routeObj["PUT " + route + "/:id"] = controllerName + ".update";
      }
      if (actions.destroy) {
        routeObj["DELETE " + route + "/:id"] = controllerName + ".destroy";
      }
      return routeObj;
    };

    /*route.POST = ->
    route.DELETE = ->
    route.PUT = ->
    route.GET_and_POST = ->
    route.ALL = ->
    route.controller = ->
    route.translateRoute = ->
    route.localizeRoute = ->
    route.restFulRoutes = ->
    route.RESTfulRoutes = ->
    route.REST = ->
    route.translateNameSpace = ->
    route.path = ->
    routeToRecordFormat= ->
     */
    return module.exports = navigator;
  })();

}).call(this);

//# sourceMappingURL=index.js.map
